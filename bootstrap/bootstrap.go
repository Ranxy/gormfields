package bootstrap

import (
	"bytes"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"
)

type Generator struct {
	PkgPath, PkgName string
	Types            []string

	OutPath       string
	BuildTags     string
	GenBuildFlags string

	NoFormat     bool
	UseZeroCheck bool
}

func (g *Generator) writeMain() string {
	tempStr := `
// +build ignore

// temporary autogenerated : typegorm bootstrapping code
{{$head := .}}
package main

import (
	"github.com/Ranxy/gormfields/generate"
	. "{{$head.PkgPath}}"

)


func main(){
	g := generate.Generate{
		OutPath:      "{{$head.OutPath}}",
		PackageName:  "{{$head.PkgName}}",
		UseZeroCheck: {{$head.UseZeroCheck}},
	}

	{{range $type := $head.Types}}
	g.Gen({{$type}}{})
	{{end}}

}

	`

	temp, err := template.New("find.template").Parse(tempStr)
	if err != nil {
		panic(err)
	}
	res := bytes.NewBuffer(make([]byte, 0))

	err = temp.Execute(res, g)
	if err != nil {
		panic(err)
	}

	path := "./boot.go"
	f, err := os.Create(path)
	if err != nil {
		panic(err)
	}

	f.Write(res.Bytes())
	f.Close()
	return path
}

func (g *Generator) Run() error {
	path := g.writeMain()

	execArgs := []string{"run"}
	execArgs = append(execArgs, "-tags", g.BuildTags, filepath.Base(path))
	cmd := exec.Command("go", execArgs...)

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Dir = filepath.Dir(path)
	if err := cmd.Run(); err != nil {
		return err
	}

	return nil
}
